package main

import (
	"fmt"
	"io/ioutil"
	"regexp"
)

func main() {
	// Read the html_preserving_tokenizer.go file
	filepath := "html_preserving_tokenizer.go"
	content, err := ioutil.ReadFile(filepath)
	if err != nil {
		fmt.Printf("Error reading file: %v\n", err)
		return
	}

	// Make a backup of the original file
	err = ioutil.WriteFile(filepath+".bak", content, 0644)
	if err != nil {
		fmt.Printf("Error creating backup: %v\n", err)
		return
	}

	// Define patterns to replace
	pattern1 := regexp.MustCompile(`tokens = append\(tokens, Token{Type: TOKEN_([A-Z_]+), Value: ([^,]+), Line: line}\)`)
	pattern2 := regexp.MustCompile(`\*tokens = append\(\*tokens, Token{Type: TOKEN_([A-Z_]+), Value: ([^,]+), Line: line}\)`)
	pattern3 := regexp.MustCompile(`\*tokens = append\(\*tokens, Token{\s+Type:\s+TOKEN_([A-Z_]+),\s+Value:\s+([^,]+),\s+Line:\s+line,\s+}\)`)

	// Replace patterns
	result := pattern1.ReplaceAllString(string(content), `tokens = append(tokens, createToken(TOKEN_$1, $2, line))`)
	result = pattern2.ReplaceAllString(result, `*tokens = append(*tokens, createToken(TOKEN_$1, $2, line))`)
	result = pattern3.ReplaceAllString(result, `*tokens = append(*tokens, createToken(TOKEN_$1, $2, line))`)

	// Write the updated content back to the file
	err = ioutil.WriteFile(filepath, []byte(result), 0644)
	if err != nil {
		fmt.Printf("Error writing file: %v\n", err)
		return
	}

	fmt.Println("Updated all token creation sites successfully!")

	// Count the number of replacements
	originalTokens := countTokenCreations(string(content))
	updatedTokens := countTokenCreations(result)
	
	fmt.Printf("Original token creations: %d\n", originalTokens)
	fmt.Printf("Remaining token creations: %d\n", updatedTokens)
	fmt.Printf("Replaced %d token creation sites\n", originalTokens - updatedTokens)
}

func countTokenCreations(content string) int {
	pattern1 := regexp.MustCompile(`Token{Type: TOKEN_`)
	pattern2 := regexp.MustCompile(`Token{\s+Type:\s+TOKEN_`)
	
	count1 := len(pattern1.FindAllStringIndex(content, -1))
	count2 := len(pattern2.FindAllStringIndex(content, -1))
	
	return count1 + count2
}