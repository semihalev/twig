package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"text/template"
)

const simpleTemplate = `// Code generated by lexgen; DO NOT EDIT.
package twig

// TokenType represents a token type
type TokenType int

// Lexer tokenizes a template string
type Lexer struct {
	source string
	tokens []Token
	line   int
	col    int
	pos    int
}
`

func main() {
	// Parse command line arguments
	outputDir := flag.String("output", ".", "Output directory for generated files")
	flag.Parse()

	// Create output directory if it doesn't exist
	err := os.MkdirAll(*outputDir, 0755)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error creating output directory: %v\n", err)
		os.Exit(1)
	}

	// Generate file
	filePath := filepath.Join(*outputDir, "simple.gen.go")
	if err := generateFromTemplate(simpleTemplate, filePath); err != nil {
		fmt.Fprintf(os.Stderr, "Error generating file: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Generated file: %s\n", filePath)
}

func generateFromTemplate(tmplText, outFile string) error {
	// Parse template
	tmpl, err := template.New("").Parse(tmplText)
	if err != nil {
		return fmt.Errorf("error parsing template: %w", err)
	}

	// Create output file
	f, err := os.Create(outFile)
	if err != nil {
		return fmt.Errorf("error creating file %s: %w", outFile, err)
	}
	defer f.Close()

	// Execute template
	if err := tmpl.Execute(f, nil); err != nil {
		return fmt.Errorf("error executing template: %w", err)
	}

	return nil
}